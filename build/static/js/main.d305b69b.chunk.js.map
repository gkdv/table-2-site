{"version":3,"sources":["Components/Card.js","Components/DataSection.js","Components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Card","md","style","key","this","props","CardInfo","className","backgroundImage","height","icon","tag","title","description","Component","padding","DataSection","createLiItem","UL","i","state","buttonName","length","push","type","styleLi","dataTag","buttonNewNames","name","styleH2","fontSize","lineHeight","fontWeight","display","margin","borderRadius","cursor","minWidth","background","textAlign","border","Header","styleInner","bannerInner","styleRow","styleBanner","h1","styleCTA","target","href","styleButton","backgroundPosition","backgroundSize","position","width","maxWidth","color","boxSizing","zIndex","PaddingTop","textDecoration","transition","outline","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d305b69b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  MDBCard,\n  MDBCardTitle,\n//   MDBBtn,\n//   MDBRow,\n  MDBCol,\n  MDBIcon,\n} from \"mdbreact\";\n\nexport class Card extends Component {\n    // constructor() {\n    //     super();\n    //     this.state = {\n    //         dataTag = '',\n\n\n    //     };\n    // }\n  render() {\n    return (\n      <>\n        {/* <MDBRow> */}\n          <MDBCol md=\"4\" style={style} key={this.props.CardInfo.key}>\n            <MDBCard\n              className=\"card-image\"\n              style={{\n                backgroundImage:\n                  \"url('https://mdbootstrap.com/img/Photos/Horizontal/Work/4-col/img%20%2814%29.jpg')\",\n                height: \"auto\",\n              }}\n            >\n              <div className=\"text-white text-center d-flex align-items-center rgba-black-strong py-5 px-4\">\n                <div>\n                  <h5 className=\"pink-text\">\n                    <MDBIcon icon=\"chart-pie\" /> {this.props.CardInfo.key}\n                  </h5>\n                  <MDBCardTitle tag=\"h3\" className=\"pt-2\">\n                    <strong>{this.props.CardInfo.title}</strong>\n                  </MDBCardTitle>\n                  <p>{this.props.CardInfo.description}</p>\n                  {/* <MDBBtn color=\"pink\">\n                    <MDBIcon icon=\"clone left\" /> View project\n                  </MDBBtn> */}\n                </div>\n              </div>\n            </MDBCard>\n          </MDBCol>\n        {/* </MDBRow> */}\n      </>\n    );\n  }\n}\n\nexport default Card;\n\nconst style = {\n  padding: \"20px\",\n};\n","import React, { Component } from \"react\";\nimport {\n    MDBRow,\n  } from \"mdbreact\";\n\nimport Card from \"./Card\";\n\nexport class DataSection extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      buttonName: [\n        \"Safety\",\n        \"HealthData\",\n        \"Science\",\n        \"News\",\n        \"COVID19\",\n        \"Virus\",\n        \"Doctors\",\n      ],\n      buttonNewNames: []\n    };\n  }\n  // updateSearch(event) {\n  //     const buttonNewNames = this.state.buttonName.filter(button => {\n  //         return button === event.target.dataTag\n  //     })\n  //     this.setState({\n  //         buttonName: [...buttonNewNames]\n  //       })\n  //     this.props.onChange(event.target.dataTag)\n  // }\n  createLiItem = () => {\n    let UL = [];\n\n    for (let i = 0; i < this.state.buttonName.length; i++) {\n      UL.push(\n        <li type='button'\n          className=\"filter__item\"\n          style={styleLi}\n          key={this.state.buttonName[i]}\n          dataTag={this.state.buttonName[i]}\n          // onCLick={this.updateSearch(this.dataTag)}\n        >\n          {this.state.buttonName[i]}\n        </li>\n      );\n    }\n    return UL;\n  };\n  render() {\n    return (\n      <div>\n        <a name=\"list\"></a>\n        <h2 className=\"section__title text-center\" style={styleH2}>\n          The List\n        </h2>\n        <div className=\"text-center\">\n          <ul className=\"filters list-unstyled list-inline\">\n            {this.createLiItem()}\n          </ul>\n        </div>\n        <MDBRow>\n          <Card\n            CardInfo={{\n              key: \"Safety\",\n              title: \"This is a card Title\",\n              description:\n                \"This is a brief description of what the article is about\",\n            }}\n          />\n          <Card\n            CardInfo={{\n              key: \"HealthData\",\n              title: \"This is a card Title\",\n              description:\n                \"This is a brief description of what the article is about\",\n            }}\n          />\n          <Card\n            CardInfo={{\n              key: \"Science\",\n              title: \"This is a card Title\",\n              description:\n                \"This is a brief description of what the article is about\",\n            }}\n          />\n          <Card\n            CardInfo={{\n              key: \"News\",\n              title: \"This is a card Title\",\n              description:\n                \"This is a brief description of what the article is about\",\n            }}\n          />\n          <Card\n            CardInfo={{\n              key: \"COVID19\",\n              title: \"This is a card Title\",\n              description:\n                \"This is a brief description of what the article is about\",\n            }}\n          />\n          <Card\n            CardInfo={{\n              key: \"Virus\",\n              title: \"This is a card Title\",\n              description:\n                \"This is a brief description of what the article is about\",\n            }}\n          />\n          <Card\n            CardInfo={{\n              key: \"Doctors\",\n              title: \"This is a card Title\",\n              description:\n                \"This is a brief description of what the article is about\",\n            }}\n          />\n        </MDBRow>\n      </div>\n    );\n  }\n}\n\nexport default DataSection;\n\nconst styleH2 = {\n  fontSize: \"2.145em\",\n  lineHeight: \"1.3\",\n  fontWeight: \"bold\",\n  padding: \"70px 0 0 0\",\n};\nconst styleLi = {\n  display: \"inline-block\",\n  margin: \"10px\",\n  padding: \"7px 14px\",\n  lineHeight: \"1\",\n  borderRadius: \"50px\",\n  cursor: \"pointer\",\n  minWidth: \"55px\",\n  background: \"0 0\",\n  textAlign: \"center\",\n  border: \"2px solid #362c2c\",\n};\n","import React, { Component } from \"react\";\n\nexport class Header extends Component {\n  render() {\n    return (\n      <div style={style}>\n        <div className=\"container\">\n          <div className=\"container-inner\" style={styleInner}>\n            <div className=\"banner-inner\" style={bannerInner}>\n              <div className=\"row\" style={styleRow}>\n                <div className=\"column banner-content\" style={styleBanner}>\n                  <h1 style={h1}>Digital Nomad Cities</h1>\n                  <p></p>\n                  <p>The best cities for digital nomads in one handy list.</p>\n                  <div className=\"banner__cta\" style={styleCTA}>\n                    <a className=\"button\" target=\"_self\" href=\"#list\" style={styleButton}>\n                      View the list\n                    </a>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n\nconst style = {\n  backgroundImage:\n    \"url(https://www.storyme.com/hs-fs/hubfs/StoryMe_2017/Image/background_header-01.png?t=1537799461843&width=1920&name=background_header-01.png)\",\n  backgroundPosition: \"bottom center\",\n  backgroundSize: \"cover\",\n  position: \"relative\",\n  padding: '60px 0'\n};\nconst styleInner = {\n    position: 'relative',\n    margin: '0 auto',\n    width: '90%',\n    maxWidth: '1120px',\n    color: 'black'\n};\nconst bannerInner = {\n    padding: '100px 0',\n    boxSizing: 'border-box'\n}\nconst styleRow = {\n    display: 'flex'\n}\nconst styleBanner = {\n    position: 'relative',\n    zIndex: '2',\n    textAlign: 'center',\n    width: '100%',\n    maxWidth: '950px',\n    margin: '0 auto',\n    boxSizing: 'border-box',\n    padding: '60px 0',\n}\nconst h1 = {\n    fontSize: '2.75em',\n    lineHeight: '1.3',\n    fontWeight: 'bold'\n}\nconst styleCTA = {\n    PaddingTop: '25px'\n}\nconst styleButton = {\n    color: 'white',\n    background: '#362c2c',\n    padding: '.87em 1.7em',\n    borderRadius: '4px',\n    // background: '#fff',\n    textDecoration: 'none',\n    boxSizing: 'border-box',\n    transition: 'transform .4s cubic-bezier(.374,.019,.035,1.861),-webkit-transform .3s cubic-bezier(.374,.019,.035,1.861)',\n    display: 'inline-block',\n    border: 'none',\n    cursor: 'pointer',\n    outline: '0'\n}","import React from 'react';\nimport DataSection from './Components/DataSection';\nimport Header from './Components/Header'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <DataSection />\n    \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}